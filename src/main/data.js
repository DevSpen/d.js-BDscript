const { Client, Message, Collection, Interaction, TextChannel, MessageEmbed, Intents, Guild } = require("discord.js");

/**
 * Use this for global object typings.
 */
module.exports = {
    /**
     * This is only here for typing.
     * @type {function}
     */
    sendError: function() {},
    /**
     * The channel the command was run in. this is not subject to be always a TextChannel.
     * @type {TextChannel}
     */
    mainChannel: new TextChannel(new Guild(new Client({ intents: Intents.ALL }), {}), {}),
    /**
     * The channel to send response to, may not be TextChannel.
     */
    channel: new TextChannel(new Guild(new Client({ intents: Intents.ALL }), {}), {}),
    /**
     * The client for this instance of d.js-bdscript.
     * @type {Client}
     */
    client: new Client({ intents: Intents.ALL }),
    /**
     * Main object describing author, and other stuff.
     * @type {Message}
     */
    message: new Message(new Client({ intents: Intents.ALL }), { id: "1" }, {}),
    /**
     * The data for this command.
     * @type {object}
     */
    data: {
        slash_options: new Collection(),
        interaction: new Interaction(new Client({ intents: Intents.ALL }), { member: { user: {} } })
    },
    /**
     * The arguments the user has passed.
     * @type {array}
     */
    args: new Array(),
    /**
     * Stores all data for this current command that is being executed.
     * @type {object}
     */
    container: {
        /**
         * Random numbers generated for this command.
         * @type {object}
         */
        randoms: {},
        /**
         * local variable holder.
         * @type {object}
         */
        keywords: {}, 
        /**
         * Random texts genereated for this command.
         * @type {object}
         */
        randomTexts: {},
        /**
         * Data retrieved from $textSplit.
         * @type {array}  
         */ 
        splits: [], 
        /**
         * Components for the bot response. (or in general)
         * @type {array}
         */
        components: [], 
        /**
         * Random strings generated by the command.
         * @type {object}
         */
        randomStrings: {},
        /**
         * The cached invites for this command.
         * @type {object}  
         */ 
        invites: {},
        /**
         * Whether this reply will be of ephemeral type, only available for interactions.
         * @type {boolean}
         */
        ephemeral: new Boolean(), 
        /**
         * Pointer to a function's data.
         * @type {string}
         */
        pointTo: new String(),
        /**
         * Caches http requests.
         * @type {object}
         */
        requests: {}, 
        /**
         * Code data, do not interact with this
         * @readonly
         * @private
         * @type {array}
         */
        array: [], 
        /**
         * Whether to actually update this interaction.
         * @type {boolean}
         */
        updateInteraction: new Boolean(),
        /**
         * Code string, do not interact with this.
         * @readonly 
         * @private
         * @type {strig}
         */ 
        code: new String(),
        /**
         * Whether the reply is deferred.
         * @type {boolean}
         */
        replyWaiting: new Boolean(),
        /**
         * Whether the message will be a reply (inline, or interaction).
         * @type {boolean}
         */
        reply: new Boolean(),
        /**
         * Whether to mention the user this command is replying to.
         * @type {boolean}
         */
        replyMention: new Boolean(),
        /**
         * The embed to send as response.
         * @type {MessageEmbed}
         */
        embed: new MessageEmbed() 
    }
}